// ==========================================================================
// #MIXINS
// ========================================================================== */





// Drop clearfix styles into our element.
// ========================================================================== */

@mixin clearfix() {

  &:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }

}





// Create a rem-based font-size that automatically sits on our baseline grid.
// ========================================================================== */

@mixin font-size($font-size, $line-height: auto) {
  font-size: $font-size;
  font-size: ($font-size / $global-font-size) * 1rem;

  @if ($line-height == auto) {
    line-height: ceil($font-size / $global-line-height) * ($global-line-height / $font-size);
  }

  @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height;
    }

    @else if ($line-height != none and $line-height != false) {

      @warn "`#{$line-height}` is not a valid value for `line-height`.";

    }

  }

}





// Generate a rem-based property with its pixel fallback
// ========================================================================== */

@mixin rem($property, $value) {

  @if (type-of($value) == number and unit($value) == 'px') {

    #{$property}: $value;
    #{$property}: rem($value);

  }

  @else {

    @error "`@include rem()` expected a pixel value. Actual value was: `#{$value}`";

  }


}





// Visually hidden content
//
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// ========================================================================== */

@mixin hide-visually($important: false) {

  @if ($important == false) {
    $important: null;
  } @else {
    $important: !important;
  }

  border: 0 $important;
  clip: rect(0 0 0 0) $important;
  height: 1px $important;
  margin: -1px $important;
  overflow: hidden $important;
  padding: 0 $important;
  position: absolute $important;
  width: 1px $important;
}





// Spriting setup mixin
//
// This mixin simply holds some shared styles for sprites; it doesn’t actually
// create anything yet. It’s a private mixin because, currently, it’s not much
// use on its own so can’t really be used arbitrarily.
//
// 1. Where does the sprite actually live?
// 2. The default kinda size for most icons.
// 3. How big is the regular sprite image?
// ========================================================================== */

@mixin _sprite-setup() {
  display: inline-block;
  vertical-align: middle;
  background-image: url(#{$image-path}sprite/icons.png); // 1
  width: 20px; // 2
  height: 20px; // 2

  // Retina screens get a nicer sprite
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
         only screen and (   min--moz-device-pixel-ratio: 2),
         only screen and (     -o-min-device-pixel-ratio: 2/1),
         only screen and (        min-device-pixel-ratio: 2),
         only screen and (                min-resolution: 192dpi),
         only screen and (                min-resolution: 2dppx) {
    background-image: url(#{$image-path}sprite/icons@2x.png); // 1
    background-size: 396px 266px; // 3
  }

}

// Sprite creation mixin
//
// This mixin is used to actually create sprites. Pass in a named sprite (found
// in `$global-sprite`) and optionally whether or not the sprite will be held in
// generated content (i.e. `::before` or `::after`).
//
// Usage:
//
//     .foo {
//       @include sprite(arrow-down);
//     }
//
//     .bar::after {
//       @include sprite(info, true)
//     }
//
// ========================================================================== */

@mixin sprite($image, $generated: false) {

  @if ($generated != false) {
    content: "";
    @include _sprite-setup();
  }

  background-position: map-deep-get($global-sprite, $image, x) map-deep-get($global-sprite, $image, y);
  width: map-deep-get($global-sprite, $image, width);
  height: map-deep-get($global-sprite, $image, height);
}
